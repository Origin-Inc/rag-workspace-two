version: '3.9'

services:
  # PostgreSQL 16 with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: rag-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-raguser}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-ragdb}
      # Performance tuning for 8GB RAM server
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    command: >
      postgres
      -c shared_buffers=2GB
      -c effective_cache_size=6GB
      -c maintenance_work_mem=512MB
      -c work_mem=32MB
      -c max_connections=200
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c wal_buffers=16MB
      -c max_wal_size=4GB
      -c min_wal_size=1GB
      -c checkpoint_completion_target=0.9
      -c checkpoint_timeout=15min
      -c log_statement=all
      -c log_duration=on
      -c shared_preload_libraries='pg_stat_statements'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./backups/postgres:/backups
    ports:
      - "127.0.0.1:5432:5432"
    shm_size: 256mb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-raguser} -d ${DB_NAME:-ragdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rag-network

  # Redis 7 with persistence
  redis:
    image: redis:7-alpine
    container_name: rag-redis-prod
    restart: always
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy noeviction
      --requirepass ${REDIS_PASSWORD}
      --tcp-backlog 511
      --timeout 0
      --tcp-keepalive 300
      --databases 16
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
      --dir /data
      --dbfilename dump.rdb
      --appendfilename appendonly.aof
    volumes:
      - redis_data:/data
      - ./backups/redis:/backups
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rag-network

  # Remix application
  app:
    build:
      context: ./rag-app
      dockerfile: Dockerfile.production
    container_name: rag-app-prod
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      # Database - can switch between local and Supabase
      DATABASE_URL: ${DATABASE_URL:-postgresql://raguser:${DB_PASSWORD}@postgres:5432/ragdb?schema=public}
      DIRECT_URL: ${DIRECT_URL:-postgresql://raguser:${DB_PASSWORD}@postgres:5432/ragdb?schema=public}
      # Redis - can switch between local and Upstash
      REDIS_URL: ${REDIS_URL:-redis://:${REDIS_PASSWORD}@redis:6379}
      REDIS_PROVIDER: ${REDIS_PROVIDER:-local}
      # Upstash fallback (optional)
      UPSTASH_REDIS_REST_URL: ${UPSTASH_REDIS_REST_URL:-}
      UPSTASH_REDIS_REST_TOKEN: ${UPSTASH_REDIS_REST_TOKEN:-}
      # Application secrets
      SESSION_SECRET: ${SESSION_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_SECRET: ${ENCRYPTION_SECRET}
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_ORGANIZATION: ${OPENAI_ORGANIZATION:-}
      # Application URLs
      APP_URL: ${APP_URL:-https://localhost}
      # Feature flags
      ENABLE_INDEXING_WORKER: ${ENABLE_INDEXING_WORKER:-true}
      USE_MEMORY_OPTIMIZED_INDEXING: ${USE_MEMORY_OPTIMIZED_INDEXING:-false}
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - rag-network
    labels:
      - "caddy=app.${DOMAIN}"
      - "caddy.reverse_proxy={{upstreams 3000}}"

  # BullMQ Worker for background indexing
  worker:
    build:
      context: ./rag-app
      dockerfile: Dockerfile.production
    container_name: rag-worker-prod
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run worker
    environment:
      NODE_ENV: production
      # Same environment as app
      DATABASE_URL: ${DATABASE_URL:-postgresql://raguser:${DB_PASSWORD}@postgres:5432/ragdb?schema=public}
      DIRECT_URL: ${DIRECT_URL:-postgresql://raguser:${DB_PASSWORD}@postgres:5432/ragdb?schema=public}
      REDIS_URL: ${REDIS_URL:-redis://:${REDIS_PASSWORD}@redis:6379}
      REDIS_PROVIDER: ${REDIS_PROVIDER:-local}
      UPSTASH_REDIS_REST_URL: ${UPSTASH_REDIS_REST_URL:-}
      UPSTASH_REDIS_REST_TOKEN: ${UPSTASH_REDIS_REST_TOKEN:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ENABLE_INDEXING_WORKER: true
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-3}
    volumes:
      - app_logs:/app/logs
    networks:
      - rag-network

  # Caddy reverse proxy with automatic SSL
  caddy:
    image: caddy:2-alpine
    container_name: rag-caddy-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp" # HTTP/3
    environment:
      DOMAIN: ${DOMAIN}
      EMAIL: ${ADMIN_EMAIL}
    volumes:
      - ./Caddyfile.production:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - rag-network
    depends_on:
      - app

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: rag-prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - rag-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rag-grafana
    restart: always
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "127.0.0.1:3001:3000"
    networks:
      - rag-network
    depends_on:
      - prometheus
    labels:
      - "caddy=grafana.${DOMAIN}"
      - "caddy.reverse_proxy={{upstreams 3000}}"
      - "caddy.basicauth=/*"
      - "caddy.basicauth.admin=${GRAFANA_BASIC_AUTH}"

  # PostgreSQL backup service
  postgres-backup:
    image: prodrigestivill/postgres-backup-local:16
    container_name: rag-postgres-backup
    restart: always
    volumes:
      - ./backups/postgres:/backups
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${DB_NAME:-ragdb}
      POSTGRES_USER: ${DB_USER:-raguser}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_EXTRA_OPTS: "--verbose --no-owner"
      SCHEDULE: "@daily"
      BACKUP_KEEP_DAYS: 7
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 6
      HEALTHCHECK_PORT: 8080
    networks:
      - rag-network
    depends_on:
      postgres:
        condition: service_healthy

networks:
  rag-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local