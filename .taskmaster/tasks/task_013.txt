# Task ID: 13
# Title: Project Management System - Implement comprehensive project management within workspaces
# Status: done
# Dependencies: 2, 11
# Priority: medium
# Description: Build a complete project management system with CRUD operations, hierarchical organization, dashboard views, collaboration features, and drag-and-drop functionality for organizing pages within projects
# Details:
1. Create project data model in Supabase:
```sql
CREATE TABLE projects (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  workspace_id UUID REFERENCES workspaces(id) ON DELETE CASCADE,
  parent_project_id UUID REFERENCES projects(id),
  name TEXT NOT NULL,
  description TEXT,
  icon TEXT,
  color TEXT,
  position INTEGER DEFAULT 0,
  metadata JSONB DEFAULT '{}',
  tags TEXT[],
  is_template BOOLEAN DEFAULT FALSE,
  template_structure JSONB,
  is_archived BOOLEAN DEFAULT FALSE,
  archived_at TIMESTAMP WITH TIME ZONE,
  created_by UUID REFERENCES users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE project_pages (
  project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
  page_id UUID REFERENCES pages(id) ON DELETE CASCADE,
  position INTEGER DEFAULT 0,
  folder_path TEXT,
  PRIMARY KEY (project_id, page_id)
);

CREATE TABLE project_collaborators (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id),
  role TEXT CHECK (role IN ('owner', 'editor', 'viewer')),
  permissions JSONB DEFAULT '{}',
  invited_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

2. Implement project CRUD API routes:
```typescript
// app/api/projects/route.ts
export async function POST(request: Request) {
  const { name, workspaceId, parentId, template } = await request.json();
  
  if (template) {
    // Clone template structure
    const templateData = await supabase
      .from('projects')
      .select('*, project_pages(*)')
      .eq('id', template)
      .single();
    
    return createProjectFromTemplate(templateData.data);
  }
  
  const { data, error } = await supabase
    .from('projects')
    .insert({ name, workspace_id: workspaceId, parent_project_id: parentId })
    .select()
    .single();
  
  return NextResponse.json(data);
}
```

3. Build project dashboard component with activity overview:
```typescript
// components/projects/ProjectDashboard.tsx
interface ProjectDashboard {
  projectId: string;
}

export function ProjectDashboard({ projectId }: ProjectDashboard) {
  const { project, pages, activity, collaborators } = useProjectData(projectId);
  
  return (
    <div className="grid grid-cols-12 gap-4">
      <div className="col-span-8">
        <ProjectOverview project={project} />
        <RecentPages pages={pages} />
        <ActivityFeed activities={activity} />
      </div>
      <div className="col-span-4">
        <ProjectStats pages={pages.length} collaborators={collaborators.length} />
        <CollaboratorsList collaborators={collaborators} />
        <ProjectMetadata tags={project.tags} metadata={project.metadata} />
      </div>
    </div>
  );
}
```

4. Implement drag-and-drop page organization with react-beautiful-dnd:
```typescript
// components/projects/PageOrganizer.tsx
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';

export function PageOrganizer({ projectId, pages }) {
  const handleDragEnd = async (result) => {
    if (!result.destination) return;
    
    const newPages = Array.from(pages);
    const [reorderedItem] = newPages.splice(result.source.index, 1);
    newPages.splice(result.destination.index, 0, reorderedItem);
    
    // Update positions in database
    await updatePagePositions(projectId, newPages);
  };
  
  return (
    <DragDropContext onDragEnd={handleDragEnd}>
      <Droppable droppableId="pages">
        {(provided) => (
          <div {...provided.droppableProps} ref={provided.innerRef}>
            {pages.map((page, index) => (
              <Draggable key={page.id} draggableId={page.id} index={index}>
                {(provided) => (
                  <PageItem
                    ref={provided.innerRef}
                    {...provided.draggableProps}
                    {...provided.dragHandleProps}
                    page={page}
                  />
                )}
              </Draggable>
            ))}
            {provided.placeholder}
          </div>
        )}
      </Droppable>
    </DragDropContext>
  );
}
```

5. Create project sidebar navigation with hierarchical display:
```typescript
// components/navigation/ProjectSidebar.tsx
export function ProjectSidebar({ workspaceId }) {
  const { projects } = useProjects(workspaceId);
  
  const renderProjectTree = (projects: Project[], parentId: string | null = null) => {
    return projects
      .filter(p => p.parent_project_id === parentId)
      .map(project => (
        <div key={project.id}>
          <ProjectNode project={project} />
          {renderProjectTree(projects, project.id)}
        </div>
      ));
  };
  
  return (
    <div className="project-sidebar">
      <SearchInput placeholder="Search projects..." />
      <div className="project-tree">
        {renderProjectTree(projects)}
      </div>
    </div>
  );
}
```

6. Implement project search with Supabase full-text search:
```typescript
// app/api/projects/search/route.ts
export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const query = searchParams.get('q');
  const workspaceId = searchParams.get('workspaceId');
  
  const { data } = await supabase
    .from('projects')
    .select('*, project_pages(count)')
    .eq('workspace_id', workspaceId)
    .textSearch('name', query, { type: 'websearch' })
    .order('updated_at', { ascending: false });
  
  return NextResponse.json(data);
}
```

7. Build project templates system:
```typescript
// components/projects/TemplateSelector.tsx
const PROJECT_TEMPLATES = [
  { id: 'kanban', name: 'Kanban Board', structure: { columns: ['To Do', 'In Progress', 'Done'] } },
  { id: 'docs', name: 'Documentation', structure: { folders: ['Getting Started', 'API', 'Guides'] } },
  { id: 'roadmap', name: 'Product Roadmap', structure: { quarters: ['Q1', 'Q2', 'Q3', 'Q4'] } }
];

export function TemplateSelector({ onSelect }) {
  return (
    <div className="grid grid-cols-3 gap-4">
      {PROJECT_TEMPLATES.map(template => (
        <TemplateCard
          key={template.id}
          template={template}
          onClick={() => onSelect(template)}
        />
      ))}
    </div>
  );
}
```

8. Implement bulk operations on pages:
```typescript
// components/projects/BulkActions.tsx
export function BulkActions({ selectedPages, projectId }) {
  const handleBulkMove = async (targetProjectId: string) => {
    await supabase
      .from('project_pages')
      .update({ project_id: targetProjectId })
      .in('page_id', selectedPages);
  };
  
  const handleBulkArchive = async () => {
    await supabase
      .from('pages')
      .update({ is_archived: true, archived_at: new Date() })
      .in('id', selectedPages);
  };
  
  return (
    <div className="bulk-actions-toolbar">
      <Button onClick={handleBulkArchive}>Archive Selected</Button>
      <Button onClick={() => setShowMoveDialog(true)}>Move to Project</Button>
      <Button onClick={handleBulkDelete}>Delete Selected</Button>
    </div>
  );
}
```

9. Create project settings and permissions management:
```typescript
// components/projects/ProjectSettings.tsx
export function ProjectSettings({ projectId }) {
  const [settings, setSettings] = useState({
    permissions: {
      canInviteMembers: true,
      defaultRole: 'viewer',
      requireApproval: false
    },
    sharing: {
      isPublic: false,
      shareableLink: null,
      linkExpiry: null
    }
  });
  
  return (
    <Tabs defaultValue="general">
      <TabsList>
        <TabsTrigger value="general">General</TabsTrigger>
        <TabsTrigger value="permissions">Permissions</TabsTrigger>
        <TabsTrigger value="sharing">Sharing</TabsTrigger>
        <TabsTrigger value="archive">Archive & Delete</TabsTrigger>
      </TabsList>
      <TabsContent value="permissions">
        <PermissionsManager projectId={projectId} settings={settings.permissions} />
      </TabsContent>
    </Tabs>
  );
}
```

10. Implement project archiving and restoration:
```typescript
// app/api/projects/[id]/archive/route.ts
export async function POST(request: Request, { params }) {
  const { id } = params;
  
  // Archive project and all its pages
  const { error } = await supabase.rpc('archive_project', {
    project_id: id,
    archive_pages: true
  });
  
  if (!error) {
    // Trigger notification to collaborators
    await notifyCollaborators(id, 'project_archived');
  }
  
  return NextResponse.json({ success: !error });
}

export async function DELETE(request: Request, { params }) {
  const { id } = params;
  
  // Restore archived project
  const { data } = await supabase
    .from('projects')
    .update({ is_archived: false, archived_at: null })
    .eq('id', id)
    .select();
  
  return NextResponse.json(data);
}
```

# Test Strategy:
1. Test project CRUD operations create, list, edit, and delete projects with proper workspace association and verify parent-child relationships work correctly. 2. Verify project dashboard displays accurate page count, recent activity feed updates in real-time, and collaborator list shows correct roles. 3. Test drag-and-drop functionality reorders pages correctly and persists position changes to database. 4. Verify project hierarchy displays nested projects properly with correct indentation and expand/collapse functionality. 5. Test project search returns relevant results and filters by workspace correctly. 6. Verify template creation properly clones structure and creates all default pages/folders. 7. Test bulk operations can move/archive/delete multiple pages simultaneously with proper permission checks. 8. Verify project permissions system correctly restricts actions based on user role (owner/editor/viewer). 9. Test project archiving soft-deletes project and optionally archives all associated pages. 10. Verify restoration brings back archived projects with all relationships intact. 11. Test collaborator management can add/remove users and update roles with email notifications. 12. Verify project metadata and tags are searchable and filterable in project list view.

# Subtasks:
## 1. Create project data model and Supabase tables with RLS policies [done]
### Dependencies: None
### Description: Design and implement the complete database schema for projects including main projects table, project_pages junction table, and project_collaborators table with proper foreign key relationships and row-level security policies
### Details:
Create projects table with fields for workspace_id, parent_project_id for hierarchy, metadata JSONB, tags array, template support, and archival tracking. Implement project_pages junction table for many-to-many relationship between projects and pages with position tracking. Set up project_collaborators table with role-based permissions. Add RLS policies to ensure users can only access projects they have permission to view or edit based on workspace membership and project collaboration roles.

## 2. Implement project CRUD API routes with Remix actions and loaders [done]
### Dependencies: 13.1
### Description: Build comprehensive server-side API routes for creating, reading, updating, and deleting projects with proper authentication, validation, and error handling using Remix's action and loader patterns
### Details:
Create routes/api/projects/route.ts with POST for project creation including template cloning support, GET for listing projects with filtering and pagination, PUT for updates, and DELETE for soft deletion. Implement routes/api/projects/$projectId/route.ts for individual project operations. Add support for creating projects from templates by cloning template structure and pages. Include workspace validation to ensure users can only create projects in authorized workspaces.

## 3. Build project dashboard component with activity feed and statistics [done]
### Dependencies: 13.2
### Description: Create a comprehensive project dashboard that displays project overview, recent pages, activity feed, collaborator list, and key statistics with real-time updates using Supabase subscriptions
### Details:
Implement ProjectDashboard component with grid layout showing project overview card with name, description, and metadata. Create RecentPages component displaying last accessed pages with timestamps. Build ActivityFeed component subscribing to project changes via Supabase realtime. Add ProjectStats widget showing total pages, active collaborators, and last updated time. Include CollaboratorsList with avatars and roles. Use Supabase realtime subscriptions for live updates.

## 4. Implement drag-and-drop page organization with react-beautiful-dnd [done]
### Dependencies: 13.3
### Description: Create an intuitive drag-and-drop interface for organizing pages within projects, including reordering, folder creation, and nested structure support with position persistence
### Details:
Install and configure react-beautiful-dnd library. Build PageOrganizer component with DragDropContext, Droppable, and Draggable components. Implement handleDragEnd function to update page positions in project_pages table. Add support for creating folders and nested page structures with folder_path tracking. Include visual feedback during drag operations with smooth animations. Persist position changes to Supabase with optimistic updates for responsive UI.

## 5. Create hierarchical project sidebar navigation component [done]
### Dependencies: 13.2
### Description: Build a collapsible sidebar navigation that displays projects in a tree structure with parent-child relationships, search functionality, and quick actions for each project
### Details:
Implement ProjectSidebar component with recursive renderProjectTree function for displaying nested projects. Add expand/collapse functionality for parent projects with state persistence. Include project search input with debounced filtering. Add quick action buttons for each project (new page, settings, archive). Style with indentation levels for visual hierarchy. Implement keyboard navigation support for accessibility. Cache project tree structure for performance.

## 6. Implement project search with Supabase full-text search capabilities [done]
### Dependencies: 13.1, 13.2
### Description: Build advanced search functionality for projects using Supabase's full-text search, supporting queries across project names, descriptions, tags, and associated page content
### Details:
Create search API endpoint using Supabase's textSearch function for project names and descriptions. Implement tag-based filtering with array contains operations. Add search across associated pages using joins with project_pages table. Build SearchResults component with highlighted matches and result grouping. Include search suggestions and recent searches storage. Add filters for archived status, date ranges, and collaborator involvement. Optimize with proper indexes for search performance.

## 7. Build project templates system with predefined structures [done]
### Dependencies: 13.2
### Description: Create a template management system allowing users to create projects from predefined templates like Kanban boards, documentation sites, and product roadmaps with automatic structure generation
### Details:
Define template structures for common project types (Kanban, Documentation, Roadmap, Sprint Planning). Build TemplateSelector component with visual template previews. Implement template cloning logic that creates project structure with predefined folders and pages. Add custom template creation from existing projects. Store template definitions in template_structure JSONB column. Include template marketplace UI for browsing available templates. Support template versioning and updates.

## 8. Implement bulk operations interface for managing multiple pages [done]
### Dependencies: 13.4
### Description: Create bulk action tools for selecting and performing operations on multiple pages simultaneously, including move, archive, delete, and tag operations with undo functionality
### Details:
Build BulkActions toolbar with checkbox selection for multiple pages. Implement bulk move to different projects with project selector dialog. Add bulk archive with confirmation and archived_at timestamp setting. Create bulk delete with soft delete option and restoration capability. Include bulk tagging interface for adding/removing tags. Implement undo/redo system for bulk operations using command pattern. Add progress indicators for long-running bulk operations.

## 9. Create project settings and permissions management interface [done]
### Dependencies: 13.1, 13.3
### Description: Build comprehensive settings panel for managing project configuration, user permissions, sharing options, and collaboration settings with role-based access control
### Details:
Implement ProjectSettings component with tabbed interface for different setting categories. Create PermissionsManager for setting user roles (owner, editor, viewer) with granular permissions. Build sharing interface with public/private toggle and shareable link generation with expiry dates. Add invitation system for adding collaborators with email notifications. Include transfer ownership functionality with confirmation. Implement audit log for permission changes. Add project export/import settings.

## 10. Implement project archiving and restoration system [done]
### Dependencies: 13.2, 13.9
### Description: Build complete archiving workflow for projects including soft deletion, restoration capabilities, automatic cleanup, and archived project browsing interface
### Details:
Create archive API endpoints for soft deleting projects with is_archived flag and archived_at timestamp. Implement cascade archiving for all associated pages using Supabase RPC function. Build archived projects view with restoration options and permanent deletion after retention period. Add archive notifications to collaborators via Edge Functions. Implement automatic cleanup job using pg_cron for old archived projects. Include archive export functionality before permanent deletion. Add archive search and filtering capabilities.

