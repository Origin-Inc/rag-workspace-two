# Task ID: 5
# Title: Build AI Controller Sidebar with Command Processing
# Status: done
# Dependencies: 4
# Priority: high
# Description: Create the persistent AI sidebar interface with natural language command processing, CRITICAL dry-run preview with user confirmation, and action execution capabilities integrated with Supabase backend, focusing on intelligent database block creation
# Details:
1. Create AI sidebar React component with fixed right-hand positioning
2. **CRITICAL: Implement mandatory dry-run preview system** - ALL commands must show detailed preview of what will be created/modified before execution with explicit user confirmation UI
3. Integrate OpenAI API for intelligent command parsing with Supabase storage:
```typescript
const completion = await openai.chat.completions.create({
  model: "gpt-4",
  messages: [
    {role: "system", content: "Parse user commands into structured actions. For database creation commands, intelligently infer appropriate columns based on context (e.g., 'track project tasks' should suggest Task Name, Status, Assignee, Due Date columns)..."},
    {role: "user", content: userCommand}
  ],
  functions: actionSchemas
});
// Generate preview first
const preview = await generateActionPreview(completion.choices[0].message);
// Show preview and await confirmation
if (await getUserConfirmation(preview)) {
  // Store parsed result in Supabase only after confirmation
  await supabase.from('action_logs').insert({
    user_id: user.id,
    command: userCommand,
    actions: completion.choices[0].message,
    preview_shown: true,
    confirmed_at: new Date()
  });
}
```
4. Define Zod schemas for database-focused actions with intelligent defaults:
```typescript
const CreateDatabaseBlockAction = z.object({
  type: z.literal('createDatabase'),
  name: z.string(),
  columns: z.array(z.object({
    name: z.string(),
    type: z.enum(['text', 'number', 'date', 'select', 'formula', 'checkbox', 'relation']),
    formula: z.string().optional(), // For formula columns
    options: z.array(z.string()).optional() // For select columns
  })),
  suggestedColumns: z.boolean().default(true) // AI suggests columns based on context
});
```
5. **Build comprehensive dry-run preview component** with Supabase Realtime progress updates showing:
   - Exact database structure to be created
   - Column names and types
   - Sample data preview
   - Affected existing data (if any)
   - Confirmation/Cancel buttons
6. Implement AI context understanding for database commands:
   - 'Add a database to track project tasks' → Creates Task Name, Status, Assignee, Due Date, Priority columns
   - 'Create expense tracker database' → Creates Date, Description, Amount, Category, Payment Method columns
   - Support natural language formula definitions: 'Add a column that calculates total from price and quantity'
7. Create action validation pipeline using Zod and Supabase RPC functions with preview generation
8. Implement action execution engine with Supabase transactions (only after user confirmation)
9. Enhanced action_logs table with preview tracking:
```sql
CREATE TABLE action_logs (
  id SERIAL PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id),
  command TEXT NOT NULL,
  actions JSONB NOT NULL,
  preview JSONB NOT NULL,
  preview_shown BOOLEAN DEFAULT FALSE,
  confirmed_at TIMESTAMP,
  executed_at TIMESTAMP,
  status VARCHAR(50),
  created_at TIMESTAMP DEFAULT NOW()
);
```
10. Use Supabase Storage for command artifacts and preview snapshots
11. Implement Supabase Edge Functions for intelligent command parsing and column suggestion
12. Build undo functionality with stored preview states in Supabase

# Test Strategy:
Test natural language database creation commands generate appropriate column suggestions (e.g., 'project tasks' creates relevant columns). Verify ALL commands show dry-run preview before execution. Test user confirmation flow works correctly. Test formula column creation from natural language. Verify preview accurately represents what will be created. Test Supabase RLS policies restrict access appropriately. Test Edge Functions handle intelligent parsing efficiently. Verify action validation through RPC functions catches invalid operations. Test that NO actions execute without user confirmation. Verify audit logs capture preview and confirmation states. Test Storage integration for preview snapshots.

# Subtasks:
## 1. Create AI sidebar UI component with confirmation flow [done]
### Dependencies: None
### Description: Build the persistent right-hand sidebar React component with input field, command history, dry-run preview area, and confirmation buttons
### Details:
Implement fixed positioning sidebar with chat-like interface, command input, history display, prominent preview section for dry-run results, and clear Confirm/Cancel buttons for user confirmation
<info added on 2025-08-10T19:13:43.141Z>
AI sidebar UI component implementation is complete. Located in app/components/ai-sidebar/ directory with main AISidebar.tsx component plus modular PreviewPanel.tsx and CommandHistory.tsx subcomponents. Full confirmation flow working with dry-run preview capability. Successfully integrated into database-demo.tsx route. Ready for OpenAI API integration for command processing logic.
</info added on 2025-08-10T19:13:43.141Z>

## 2. Set up OpenAI API with intelligent database parsing [done]
### Dependencies: None
### Description: Configure OpenAI client with context-aware prompts for database creation and column inference
### Details:
Install OpenAI SDK, configure API key, create chat completion service with system prompts that understand database contexts (e.g., 'project tasks' → task-related columns), store results in Supabase only after confirmation

## 3. Define Zod schemas for database-focused actions [done]
### Dependencies: None
### Description: Create comprehensive Zod validation schemas emphasizing database and formula column operations
### Details:
Define schemas for CreateDatabaseBlockAction with intelligent column suggestions, formula column creation, EditBlockAction, DeleteBlockAction, with proper validation rules and preview requirements

## 4. Setup enhanced Supabase tables with preview tracking [done]
### Dependencies: None
### Description: Create action_logs table with preview and confirmation tracking fields
### Details:
Create action_logs table with preview JSONB field, preview_shown boolean, confirmed_at timestamp, implement RLS policies for user access control, create indexes for performance

## 5. Build mandatory dry-run preview system [done]
### Dependencies: 5.3, 5.4
### Description: Create comprehensive preview component that shows exactly what will be created/modified
### Details:
Build preview renderer that displays database structure, column names/types, sample data, affected existing data, with clear visual representation and mandatory Confirm/Cancel buttons before any execution

## 6. Implement intelligent column suggestion Edge Function [done]
### Dependencies: 5.3
### Description: Create Edge Function that suggests appropriate columns based on database context
### Details:
Build supabase.functions.invoke('suggest-columns') that analyzes command context and suggests relevant columns (e.g., 'expense tracker' → Date, Amount, Category, etc.)

## 7. Create formula column parser [done]
### Dependencies: 5.2, 5.3
### Description: Build natural language to formula column converter
### Details:
Implement parser that converts natural language like 'calculate total from price times quantity' into proper formula column definitions with validation

## 8. Integrate Supabase Auth with confirmation requirements [done]
### Dependencies: 5.4
### Description: Use Supabase Auth to check permissions and enforce confirmation workflow
### Details:
Implement permission checks using supabase.auth.getUser(), ensure all actions require user confirmation, validate workspace access for requested commands

## 9. Build Realtime preview updates [done]
### Dependencies: 5.5, 5.8
### Description: Implement preview functionality with Supabase Realtime for live progress updates
### Details:
Use supabase.channel() for real-time preview generation progress, show live updates as AI processes command and generates structure suggestions

## 10. Create RPC functions for preview generation [done]
### Dependencies: 5.3, 5.4
### Description: Build Supabase RPC functions that generate accurate previews without executing
### Details:
Implement Supabase RPC functions that simulate actions to generate accurate previews, validate against business rules, ensure preview matches actual execution

## 11. Setup Storage for preview snapshots [done]
### Dependencies: None
### Description: Configure Supabase Storage for storing preview states and command artifacts
### Details:
Create preview-snapshots bucket using supabase.storage.from('preview-snapshots'), store visual previews and command artifacts for history

## 12. Implement confirmation-gated execution engine [done]
### Dependencies: 5.10
### Description: Build execution engine that only runs after explicit user confirmation
### Details:
Create execution engine with mandatory confirmation check, use Supabase transactions for atomic operations, verify preview matches execution, proper error handling

## 13. Build audit logging with preview history [done]
### Dependencies: 5.4, 5.12
### Description: Implement comprehensive logging including preview and confirmation data
### Details:
Log all commands, previews shown, user confirmations/cancellations, execution results, maintain complete audit trail in Supabase with proper indexing

## 14. Implement undo with preview restoration [done]
### Dependencies: 5.12, 5.13
### Description: Build undo system that can restore to previous preview states
### Details:
Create undo mechanism using stored preview states, maintain history stack with preview snapshots, implement selective undo with state restoration from Supabase

