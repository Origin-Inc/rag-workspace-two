# Task ID: 12
# Title: Workspace Dashboard - Create comprehensive workspace dashboard UI with team management and analytics
# Status: done
# Dependencies: 2, 11
# Priority: medium
# Description: Build a feature-rich workspace dashboard providing centralized access to workspace overview, team management, usage analytics, recent activity, and workspace configuration with full CRUD operations and search capabilities
# Details:
1. Create main dashboard layout with responsive grid system:
```typescript
// app/dashboard/[workspaceId]/page.tsx
import { DashboardGrid } from '@/components/dashboard/DashboardGrid';
import { WorkspaceOverview } from '@/components/dashboard/WorkspaceOverview';
import { QuickActions } from '@/components/dashboard/QuickActions';
import { TeamActivityFeed } from '@/components/dashboard/TeamActivityFeed';
import { UsageAnalytics } from '@/components/dashboard/UsageAnalytics';

export default async function WorkspaceDashboard({ params }) {
  const workspace = await getWorkspace(params.workspaceId);
  return (
    <DashboardGrid>
      <WorkspaceOverview workspace={workspace} />
      <QuickActions />
      <TeamActivityFeed />
      <UsageAnalytics />
    </DashboardGrid>
  );
}
```

2. Implement workspace overview component with recent items:
```typescript
// components/dashboard/WorkspaceOverview.tsx
const { data: recentPages } = await supabase
  .from('pages')
  .select('id, title, updated_at, project:projects(name)')
  .eq('workspace_id', workspaceId)
  .order('updated_at', { ascending: false })
  .limit(10);

const { data: projects } = await supabase
  .from('projects')
  .select('id, name, page_count:pages(count)')
  .eq('workspace_id', workspaceId)
  .order('updated_at', { ascending: false })
  .limit(5);
```

3. Build workspace CRUD operations with Supabase:
```typescript
// lib/workspace-operations.ts
export async function createWorkspace(data: WorkspaceInput) {
  const { data: workspace, error } = await supabase
    .from('workspaces')
    .insert({
      name: data.name,
      description: data.description,
      owner_id: userId,
      settings: data.settings,
      template_id: data.templateId
    })
    .select()
    .single();
  
  // Initialize workspace with template if provided
  if (data.templateId) {
    await applyWorkspaceTemplate(workspace.id, data.templateId);
  }
  return workspace;
}

export async function updateWorkspace(id: string, updates: Partial<Workspace>) {
  return await supabase
    .from('workspaces')
    .update(updates)
    .eq('id', id)
    .select();
}

export async function deleteWorkspace(id: string) {
  // Soft delete with archive
  return await supabase
    .from('workspaces')
    .update({ archived_at: new Date().toISOString() })
    .eq('id', id);
}
```

4. Create quick actions widget with recent documents:
```typescript
// components/dashboard/QuickActions.tsx
interface QuickAction {
  type: 'document' | 'template' | 'project';
  icon: IconType;
  title: string;
  action: () => void;
}

const quickActions = [
  { type: 'document', title: 'New Page', action: createNewPage },
  { type: 'project', title: 'New Project', action: createNewProject },
  { type: 'template', title: 'From Template', action: openTemplateGallery }
];

// Fetch recent documents with thumbnails
const { data: recentDocs } = await supabase
  .from('pages')
  .select('id, title, thumbnail_url, last_accessed')
  .eq('workspace_id', workspaceId)
  .order('last_accessed', { ascending: false })
  .limit(6);
```

5. Implement team activity feed with real-time updates:
```typescript
// components/dashboard/TeamActivityFeed.tsx
const channel = supabase
  .channel(`workspace:${workspaceId}:activity`)
  .on('postgres_changes', 
    { event: '*', schema: 'public', table: 'activity_log' },
    (payload) => {
      setActivities(prev => [payload.new, ...prev].slice(0, 50));
    }
  )
  .subscribe();

// Activity log schema
interface Activity {
  id: string;
  user_id: string;
  action: 'created' | 'updated' | 'deleted' | 'shared' | 'commented';
  resource_type: 'page' | 'project' | 'database' | 'comment';
  resource_id: string;
  resource_title: string;
  timestamp: Date;
  metadata?: Record<string, any>;
}
```

6. Build usage analytics dashboard with charts:
```typescript
// components/dashboard/UsageAnalytics.tsx
import { LineChart, BarChart, PieChart } from 'recharts';

const UsageAnalytics = () => {
  // Storage usage query
  const { data: storageData } = await supabase
    .rpc('calculate_storage_usage', { workspace_id: workspaceId });
  
  // Credits/API usage
  const { data: creditsData } = await supabase
    .from('usage_metrics')
    .select('date, ai_credits_used, storage_gb, api_calls')
    .eq('workspace_id', workspaceId)
    .gte('date', thirtyDaysAgo)
    .order('date');
  
  // Member activity heatmap
  const { data: memberActivity } = await supabase
    .from('user_activity_metrics')
    .select('user_id, date, actions_count')
    .eq('workspace_id', workspaceId);
  
  return (
    <div className="grid grid-cols-2 gap-4">
      <LineChart data={creditsData} title="AI Credits Usage" />
      <BarChart data={storageData} title="Storage by Type" />
      <PieChart data={memberActivity} title="Team Activity Distribution" />
      <UsageTable detailed={true} />
    </div>
  );
};
```

7. Create workspace settings panel:
```typescript
// components/dashboard/WorkspaceSettings.tsx
const settingsSections = [
  {
    id: 'general',
    title: 'General',
    fields: ['name', 'description', 'logo', 'timezone']
  },
  {
    id: 'permissions',
    title: 'Permissions & Access',
    fields: ['default_role', 'guest_access', 'sharing_policy']
  },
  {
    id: 'integrations',
    title: 'Integrations',
    component: <IntegrationsPanel />
  },
  {
    id: 'billing',
    title: 'Billing & Usage',
    component: <BillingSettings />
  }
];
```

8. Implement team member invitation system:
```typescript
// components/dashboard/InviteMembers.tsx
export async function inviteTeamMembers(emails: string[], role: Role) {
  const invitations = emails.map(email => ({
    email,
    workspace_id: workspaceId,
    role_id: role.id,
    invited_by: currentUserId,
    token: generateInviteToken(),
    expires_at: addDays(new Date(), 7)
  }));
  
  const { data, error } = await supabase
    .from('invitations')
    .insert(invitations)
    .select();
  
  // Send invitation emails via Edge Function
  await supabase.functions.invoke('send-invitations', {
    body: { invitations: data }
  });
}

// Real-time invitation status
const channel = supabase
  .channel(`invitations:${workspaceId}`)
  .on('postgres_changes',
    { event: 'UPDATE', schema: 'public', table: 'invitations' },
    handleInvitationUpdate
  );
```

9. Build workspace templates gallery:
```typescript
// components/dashboard/TemplatesGallery.tsx
const { data: templates } = await supabase
  .from('workspace_templates')
  .select('*')
  .or(`public.eq.true,owner_id.eq.${userId}`);

const categories = [
  'Project Management',
  'Product Development', 
  'Marketing',
  'Sales CRM',
  'Engineering',
  'Design System'
];

// Preview and apply template
async function applyTemplate(templateId: string) {
  const { data: template } = await supabase
    .from('workspace_templates')
    .select('structure, default_pages, settings')
    .eq('id', templateId)
    .single();
  
  // Clone template structure
  await supabase.rpc('clone_workspace_template', {
    template_id: templateId,
    target_workspace_id: workspaceId
  });
}
```

10. Implement global search across workspace:
```typescript
// components/dashboard/WorkspaceSearch.tsx
import { Command } from 'cmdk';

export function WorkspaceSearch() {
  const searchAcrossWorkspace = async (query: string) => {
    // Full-text search using Supabase
    const results = await Promise.all([
      supabase
        .from('pages')
        .select('id, title, content_preview')
        .textSearch('title', query)
        .eq('workspace_id', workspaceId)
        .limit(5),
      
      supabase
        .from('projects')
        .select('id, name, description')
        .textSearch('name', query)
        .eq('workspace_id', workspaceId)
        .limit(5),
      
      supabase
        .from('database_blocks')
        .select('id, title, page_id')
        .textSearch('title', query)
        .eq('workspace_id', workspaceId)
        .limit(5)
    ]);
    
    return combineSearchResults(results);
  };
  
  // Keyboard shortcut: Cmd+K
  useHotkeys('cmd+k', () => setSearchOpen(true));
}
```

11. Create integrations panel for third-party tools:
```typescript
// components/dashboard/IntegrationsPanel.tsx
const integrations = [
  { id: 'slack', name: 'Slack', status: 'connected', icon: SlackIcon },
  { id: 'github', name: 'GitHub', status: 'available', icon: GitHubIcon },
  { id: 'google-drive', name: 'Google Drive', status: 'available', icon: DriveIcon },
  { id: 'figma', name: 'Figma', status: 'connected', icon: FigmaIcon }
];

// OAuth flow for integrations
async function connectIntegration(provider: string) {
  const { data: { url } } = await supabase.functions.invoke('oauth-connect', {
    body: { provider, workspace_id: workspaceId }
  });
  window.location.href = url;
}

// Webhook management
const { data: webhooks } = await supabase
  .from('integration_webhooks')
  .select('*')
  .eq('workspace_id', workspaceId);
```

12. Implement responsive dashboard layout:
```typescript
// components/dashboard/DashboardGrid.tsx
export function DashboardGrid({ children }) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 p-6">
      <div className="col-span-full xl:col-span-2">
        <WorkspaceOverview />
      </div>
      <div className="col-span-1">
        <QuickActions />
      </div>
      <div className="col-span-full md:col-span-1">
        <TeamActivityFeed />
      </div>
      <div className="col-span-full xl:col-span-2">
        <UsageAnalytics />
      </div>
      {children}
    </div>
  );
}
```

# Test Strategy:
1. Test workspace overview displays correct recent pages and projects with proper sorting by updated_at timestamp. 2. Verify CRUD operations create, update, and soft-delete workspaces correctly with proper permission checks. 3. Test quick actions widget shows 6 most recent documents with working navigation links. 4. Verify team activity feed receives real-time updates via Supabase channels and displays all activity types correctly. 5. Test usage analytics charts render with accurate data for storage, credits, and API calls over 30-day period. 6. Verify workspace settings panel saves all configuration changes and validates input fields. 7. Test invitation system sends emails, generates valid tokens, and expires after 7 days. 8. Verify templates gallery filters by category and successfully clones template structure to workspace. 9. Test global search returns relevant results from pages, projects, and database blocks with proper ranking. 10. Verify integrations panel handles OAuth flows correctly and manages webhook subscriptions. 11. Test responsive layout adapts correctly for mobile, tablet, and desktop viewports. 12. Verify all dashboard components handle loading states, errors, and empty states gracefully. 13. Test role-based permissions restrict access to settings and invitation features appropriately. 14. Verify dashboard performance with large datasets (1000+ pages, 50+ team members).

# Subtasks:
## 1. Create dashboard grid layout system with responsive breakpoints [done]
### Dependencies: None
### Description: Build the main DashboardGrid component with responsive grid system supporting mobile, tablet, and desktop layouts using CSS Grid and Flexbox for optimal component arrangement
### Details:
Implement DashboardGrid component in components/dashboard/DashboardGrid.tsx with responsive breakpoints at 768px (mobile), 1024px (tablet), and 1440px (desktop). Use CSS Grid with 12-column layout on desktop, 8 on tablet, and 4 on mobile. Include proper gap spacing and container queries for adaptive layouts.

## 2. Implement workspace overview component with recent items display [done]
### Dependencies: 12.1
### Description: Create WorkspaceOverview component showing workspace summary, recent pages, active projects, and quick stats with proper data fetching from Supabase
### Details:
Build components/dashboard/WorkspaceOverview.tsx fetching recent 10 pages and 5 projects ordered by updated_at. Display workspace name, description, member count, storage usage, and creation date. Include thumbnail previews for recent pages and project cards with page counts.

## 3. Build workspace CRUD operations with Supabase integration [done]
### Dependencies: None
### Description: Implement complete workspace management functions including create, read, update, and soft-delete operations with proper RLS policies and template support
### Details:
Create lib/workspace-operations.ts with createWorkspace, updateWorkspace, deleteWorkspace (soft delete), and getWorkspace functions. Include workspace template application logic, settings management, and proper error handling. Implement workspace archiving with archived_at timestamp.
<info added on 2025-08-13T10:59:34.800Z>
Implementation approach:

1. Start with read operations (getWorkspace, getWorkspaces) to establish data fetching patterns
2. Implement createWorkspace with template support and default settings
3. Add updateWorkspace for modifying workspace properties and settings
4. Complete with deleteWorkspace implementing soft delete pattern using archived_at timestamp

Each function will include proper error handling, type safety, and RLS policy compliance. Operations will be built incrementally with unit tests for each piece.
</info added on 2025-08-13T10:59:34.800Z>

## 4. Create quick actions widget with recent documents [done]
### Dependencies: 12.1
### Description: Build QuickActions component featuring new page/project creation buttons and grid of 6 most recently accessed documents with thumbnails
### Details:
Implement components/dashboard/QuickActions.tsx with action buttons for new page, new project, and template gallery. Fetch and display 6 recent documents with thumbnail_url and last_accessed timestamp. Include hover effects and keyboard shortcuts (Cmd+N for new page).

## 5. Implement team activity feed with real-time updates [done]
### Dependencies: 12.1
### Description: Create live activity feed showing team actions using Supabase real-time subscriptions with proper activity categorization and user attribution
### Details:
Build components/dashboard/TeamActivityFeed.tsx with Supabase channel subscription to activity_log table. Display user avatars, action types (created/updated/deleted/shared/commented), resource links, and relative timestamps. Implement 50-item limit with auto-cleanup and activity grouping.

## 6. Build usage analytics dashboard with Recharts visualization [done]
### Dependencies: 12.1
### Description: Create comprehensive analytics component displaying AI credits usage, storage consumption, API calls, and team activity using interactive charts
### Details:
Implement components/dashboard/UsageAnalytics.tsx with LineChart for 30-day credit usage, BarChart for storage by type, PieChart for team activity distribution, and detailed usage table. Fetch data from usage_metrics and user_activity_metrics tables with proper aggregation.

## 7. Create workspace settings panel with configuration sections [done]
### Dependencies: 12.1, 12.3
### Description: Build comprehensive settings interface with tabbed sections for general settings, permissions, integrations, and billing management
### Details:
Develop components/dashboard/WorkspaceSettings.tsx with sections for general (name, description, logo, timezone), permissions (default_role, guest_access, sharing_policy), integrations panel, and billing settings. Include form validation and auto-save functionality.

## 8. Implement team member invitation system with email integration [done]
### Dependencies: 12.3
### Description: Build complete invitation flow including bulk email invites, role assignment, token generation, and Supabase Edge Function for email delivery
### Details:
Create components/dashboard/InviteMembers.tsx with bulk email input, role selector, and invitation tracking. Generate secure invite tokens with 7-day expiration. Implement Edge Function for sending invitation emails and real-time status updates via Supabase channels.

## 9. Build workspace templates gallery with preview and cloning [done]
### Dependencies: 12.1, 12.3
### Description: Create template selection interface with categorized templates, preview functionality, and one-click workspace structure cloning
### Details:
Develop components/dashboard/TemplatesGallery.tsx displaying templates by category (Project Management, Product Development, Marketing, etc.). Include template preview modal, usage statistics, and clone_workspace_template RPC function for applying templates.

## 10. Implement global workspace search with Command palette [done]
### Dependencies: 12.1
### Description: Build universal search functionality using cmdk library with full-text search across pages, projects, and database blocks
### Details:
Create components/dashboard/WorkspaceSearch.tsx using Command component with Cmd+K hotkey. Implement parallel full-text search queries across pages, projects, and database_blocks tables. Display categorized results with icons, previews, and keyboard navigation.

## 11. Create integrations panel for third-party tool connections [done]
### Dependencies: 12.7
### Description: Build integration management interface with OAuth flows for Slack, GitHub, Google Drive, and Figma including connection status and webhook configuration
### Details:
Implement components/dashboard/IntegrationsPanel.tsx showing available integrations with status indicators. Create OAuth connection flow via Edge Functions, webhook management interface, and integration settings. Store tokens securely in integration_credentials table.

## 12. Implement webhook management system for integrations [done]
### Dependencies: 12.11
### Description: Create webhook configuration interface for managing incoming and outgoing webhooks with event filtering and payload transformation
### Details:
Build webhook CRUD operations in integration_webhooks table with event type filtering, URL validation, and secret generation. Implement webhook testing functionality, delivery logs, and retry mechanism for failed webhooks.

## 14. Add performance monitoring and error tracking [done]
### Dependencies: None
### Description: Integrate performance monitoring tools to track dashboard metrics, user interactions, and error rates with proper alerting and logging
### Details:
Implement performance monitoring using Web Vitals API for LCP, FID, and CLS metrics. Add error boundary components with Sentry integration for error tracking. Create dashboard performance dashboard showing load times, API response times, and user interaction metrics.

