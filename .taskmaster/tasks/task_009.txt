# Task ID: 9
# Title: Implement Formula Engine with AI Assistance
# Status: deferred
# Dependencies: 8
# Priority: low
# Description: Build formula system for database block columns with parser, Supabase-backed evaluator, manual formula editor, server-side validation/recalculation, and AI-powered formula builder via Edge Functions
# Details:
1. Create formula parser for database block column formulas:
```typescript
interface FormulaAST {
  type: 'binary' | 'unary' | 'function' | 'reference' | 'literal' | 'column';
  operator?: string;
  function?: string;
  args?: FormulaAST[];
  columnRef?: string; // Reference to other columns in database block
  value?: any;
}
```
2. Store formula column definitions in Supabase:
```sql
CREATE TABLE db_block_formula_columns (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  db_block_id INT REFERENCES db_blocks(id),
  column_name TEXT NOT NULL,
  formula_text TEXT NOT NULL,
  ast JSONB NOT NULL,
  dependencies TEXT[] DEFAULT '{}', -- Other column names this formula depends on
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE formula_computation_cache (
  formula_column_id UUID REFERENCES db_block_formula_columns(id),
  row_id INT REFERENCES db_block_rows(id),
  result JSONB,
  computed_at TIMESTAMP DEFAULT NOW()
);

-- Enable RLS
ALTER TABLE db_block_formula_columns ENABLE ROW LEVEL SECURITY;
ALTER TABLE formula_computation_cache ENABLE ROW LEVEL SECURITY;
```
3. Implement PostgreSQL functions for formula evaluation with date calculations:
```sql
CREATE OR REPLACE FUNCTION evaluate_column_formula(ast JSONB, row_data JSONB)
RETURNS JSONB AS $$
BEGIN
  -- Support date functions like DAYS_UNTIL, DAYS_SINCE, DATE_DIFF
  -- Handle column references within same row
  RETURN evaluate_ast_with_context(ast, row_data);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function for 'days until due date' type calculations
CREATE OR REPLACE FUNCTION calculate_days_until(target_date DATE)
RETURNS INT AS $$
BEGIN
  RETURN target_date - CURRENT_DATE;
END;
$$ LANGUAGE plpgsql;
```
4. Create manual formula editor component:
```typescript
interface FormulaEditorProps {
  columnId: string;
  currentFormula: string;
  availableColumns: Column[];
  onSave: (formula: string) => void;
  onValidate: (formula: string) => Promise<ValidationResult>;
}
```
5. Build server-side validation and recalculation system:
```typescript
// Supabase Edge Function for formula validation
Deno.serve(async (req) => {
  const { formula, columnSchema } = await req.json();
  // Parse formula and validate references
  // Check for circular dependencies
  // Return validation result with error messages
});
```
6. Implement AI formula builder for database columns:
```typescript
// Edge Function for AI formula generation
Deno.serve(async (req) => {
  const { description, columns } = await req.json();
  const completion = await openai.chat.completions.create({
    model: "gpt-4",
    messages: [
      {role: "system", content: "Generate database column formulas for calculations like days until due date, percentage complete, etc."},
      {role: "user", content: `${description}\nAvailable columns: ${JSON.stringify(columns)}`}
    ]
  });
  return new Response(JSON.stringify({
    formula: completion.choices[0].message.content
  }));
});
```
7. Use Supabase Realtime for live formula updates in database blocks:
```typescript
const channel = supabase.channel('db-formulas');
channel.on(
  'postgres_changes',
  { event: '*', schema: 'public', table: 'formula_computation_cache' },
  (payload) => updateFormulaColumn(payload)
);
```
8. Integrate with database block system for efficient computation on large datasets

# Test Strategy:
Test formula parser with date calculations and column references. Verify manual formula editor validates syntax in real-time. Test server-side validation prevents circular dependencies. Verify PostgreSQL functions handle date calculations correctly. Test AI suggestions for common formulas like 'days until due date'. Test formula recalculation triggers when dependent columns change. Verify RLS policies enforce proper access. Benchmark formula computation for 50k rows < 500ms using database functions.

# Subtasks:
## 1. Design Formula Column Schema for Database Blocks [pending]
### Dependencies: None
### Description: Create Supabase schema specifically for formula columns in database blocks with support for column references and date calculations
### Details:
Create db_block_formula_columns table linking formulas to specific database block columns. Design schema to support column-to-column references within same database block. Add support for date/time calculation formulas. Create formula_computation_cache for row-level results. Implement RLS policies aligned with database block permissions.

## 2. Build Formula Parser for Column References [pending]
### Dependencies: None
### Description: Create parser that handles column references and date functions for database block formulas
### Details:
Extend parser to handle column references like @columnName or [Column Name]. Add support for date functions: DAYS_UNTIL(), DAYS_SINCE(), DATE_DIFF(). Parse relative date expressions like 'today', 'tomorrow', 'next week'. Generate AST with column reference nodes. Handle spaces and special characters in column names.

## 3. Create Manual Formula Editor Component [pending]
### Dependencies: 9.2
### Description: Build React component for manual formula editing with syntax highlighting and autocomplete
### Details:
Create Monaco-based or CodeMirror formula editor. Implement syntax highlighting for formulas and column references. Add autocomplete for available columns and functions. Show real-time validation errors inline. Display formula documentation and examples. Support undo/redo in editor.

## 4. Implement Server-Side Formula Validation [pending]
### Dependencies: 9.1, 9.2
### Description: Build Supabase Edge Function for validating formulas before saving
### Details:
Create Edge Function endpoint for formula validation. Check syntax correctness and column reference validity. Detect circular dependencies between formula columns. Validate data type compatibility. Return detailed error messages with line/column positions. Cache validation results for performance.

## 5. Build PostgreSQL Date Calculation Functions [pending]
### Dependencies: 9.1
### Description: Create comprehensive date/time calculation functions for formula evaluation
### Details:
Implement DAYS_UNTIL for countdown calculations. Create DAYS_SINCE for elapsed time. Build DATE_DIFF for flexible date comparisons. Add WORKDAYS_BETWEEN excluding weekends. Support timezone-aware calculations. Create DATE_ADD and DATE_SUBTRACT functions.

## 6. Create Formula Evaluation Engine for Database Rows [pending]
### Dependencies: 9.5, 9.2
### Description: Build PostgreSQL functions to evaluate formulas for each row in database block
### Details:
Create evaluate_column_formula function accepting row context. Resolve column references to actual row values. Handle null values and type coercion. Support nested function calls. Implement error handling with fallback values. Optimize for batch evaluation of multiple rows.

## 7. Implement Dependency Tracking for Formula Columns [pending]
### Dependencies: 9.1, 9.6
### Description: Build system to track which columns formula columns depend on
### Details:
Parse formulas to extract column dependencies. Store dependency graph in database. Create triggers to detect when dependent columns change. Build topological sort for evaluation order. Handle multi-level formula dependencies. Prevent circular dependencies at save time.

## 8. Build Incremental Recalculation System [pending]
### Dependencies: 9.7, 9.6
### Description: Create efficient system to recalculate only affected formula values when data changes
### Details:
Create database triggers on db_block_rows updates. Mark affected formula results as stale. Implement batch recalculation using PostgreSQL functions. Use NOTIFY/LISTEN for change propagation. Queue recalculations for better performance. Handle cascading formula updates.

## 9. Create AI Formula Builder for Common Calculations [pending]
### Dependencies: 9.5
### Description: Build Edge Function for AI-powered formula suggestions specific to database columns
### Details:
Create prompts for common calculations like 'days until deadline', 'percentage complete', 'status based on conditions'. Analyze column types to suggest relevant formulas. Generate syntactically correct formulas for the parser. Store successful suggestions for learning. Support natural language to formula conversion.

## 10. Implement Formula Result Caching [pending]
### Dependencies: 9.8
### Description: Build caching system for formula results with intelligent invalidation
### Details:
Store computed results in formula_computation_cache table. Implement cache invalidation on dependency changes. Use PostgreSQL VACUUM for cleanup. Create indexes for fast cache lookups. Implement TTL for time-sensitive calculations. Handle cache warming for new formulas.

## 11. Build Real-time Formula Updates [pending]
### Dependencies: 9.10, 9.8
### Description: Implement Supabase Realtime for live formula result updates in database blocks
### Details:
Configure Realtime for formula_computation_cache changes. Broadcast formula recalculations to connected clients. Implement debouncing for rapid changes. Handle offline formula computation with sync. Update only visible rows for performance. Support collaborative formula editing.

## 12. Create Bulk Formula Operations [pending]
### Dependencies: 9.6, 9.10
### Description: Build RPC functions for efficient bulk formula operations on large datasets
### Details:
Create RPC for applying formula to entire column. Implement batch evaluation for 50k+ rows. Build copy formula functionality. Create formula migration tools. Optimize using PostgreSQL parallel query. Handle memory efficiently for large datasets.

## 13. Integrate Formula Engine with Database Block UI [pending]
### Dependencies: 9.3, 9.11, 9.12
### Description: Connect formula system to database block component for seamless user experience
### Details:
Add formula column type to database block schema. Display formula results in table cells. Show formula editor on cell click. Indicate formula columns with special styling. Display calculation status and errors. Ensure performance with 50k rows using virtual scrolling and lazy evaluation.

